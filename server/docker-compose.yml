version: '3.1'

services:
  django: &django
    build: .
    links:
      - db
      - redis
    depends_on:
      - db
      - redis
    command: 'uwsgi -c /app/conf/uwsgi.ini'
    # this is a bit counter-intuitive, but we can just always use the prod config and override it
    # locally for development. this helps with making deployment easier
    environment:
      DJANGO_SETTINGS_MODULE: 'server.settings_prod'
      VIRTUAL_HOST: csci_tool.vinn.ie
      VIRTUAL_PROTO: uwsgi
      VIRTUAL_PORT: 8000
      LETSENCRYPT_HOST: csci_tool.vinn.ie
      LETSENCRYPT_EMAIL: v@vinnie.io
    env_file:
      - production.env

  # reuse the same config as the django container but with a different command
  # this eliminates the need to install all dependencies in two containers
  celery:
    <<: *django
    depends_on:
      - redis
      - db
    command: 'celery -A server worker --loglevel INFO'

  redis:
    image: 'redis'

  db:
    image: 'postgres'
    environment:
      POSTGRES_USER: 'csci_tool'
      POSTGRES_DB: 'csci_tool'
    env_file:
      - production.env

  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - './conf/nginx.conf:/etc/nginx/nginx.conf:ro'
      - './conf/uwsgi_params:/etc/nginx/uwsgi_params:ro'
      - "/etc/nginx/vhost.d"
      - "/usr/share/nginx/html"
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "/etc/nginx/certs"
    depends_on:
      - django
    links:
      - django

  letsencrypt-nginx-proxy-companion:
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    volumes_from:
      - 'nginx-proxy'
