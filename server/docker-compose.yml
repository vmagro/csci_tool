version: '3.1'

services:
  django: &django
    build: .
    links:
      - db
      - redis
    depends_on:
      - db
      - redis
    command: 'uwsgi -c /app/conf/uwsgi.ini'
    # this is a bit counter-intuitive, but we can just always use the prod config and override it
    # locally for development. this helps with making deployment easier
    env_file:
      - production.env

  # reuse the same config as the django container but with a different command
  # this eliminates the need to install all dependencies in two containers
  celery:
    <<: *django
    depends_on:
      - redis
      - db
    command: 'celery -A server worker --loglevel INFO'

  redis:
    image: 'redis'

  db:
    image: 'postgres'
    environment:
      POSTGRES_USER: 'csci_tool'
      POSTGRES_DB: 'csci_tool'
    env_file:
      - production.env

  nginx-proxy:
    image: jwilder/nginx-proxy
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: 'true'
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - './conf/nginx/uwsgi_params:/etc/nginx/uwsgi_params:ro'
      - './conf/nginx/vhost.d:/etc/nginx/vhost.d'
      - './conf/nginx/html:/usr/share/nginx/html'
      - './conf/certs:/etc/nginx/certs'
      - '/var/run/docker.sock:/tmp/docker.sock:ro'
    depends_on:
      - django
    links:
      - django

  letsencrypt-nginx-proxy-companion:
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      - './conf/nginx/vhost.d:/etc/nginx/vhost.d'
      - './conf/nginx/html:/usr/share/nginx/html'
      - './conf/certs:/etc/nginx/certs'
    depends_on:
      - nginx-proxy
